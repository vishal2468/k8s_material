
=================================================================
BASIC CORE CONCEPT Questions
=================================================================
1. List all the namespaces in the cluster



2. List all the pods in all namespaces


3. List all the pods in the particular namespace


4. List all the services in the particular namespace


5. List all the pods showing name and namespace with a json path expression


6. Create an nginx pod in a default namespace and verify the pod running


7. Create the same nginx pod with a yaml file

8. Output the yaml file of the pod you just created

9. Output the yaml file of the pod you just created without the cluster-specific information


10. Get the complete details of the pod you just created


11. Delete the pod you just created


12. Delete the pod you just created without any delay (force delete)


13. Create the nginx pod with version 1.17.4 and expose it on port 80


14. Change the Image version to 1.15-alpine for the pod you just created and verify the image version is updated


15. Change the Image version back to 1.17.1 for the pod you just updated and observe the changes


16. Check the Image version without the describe command


17. Create the nginx pod and execute the simple shell on the pod

k exec nginx -it sh
k exec nginx -it -- sh

18. Get the IP Address of the pod you just created

k get pods -o wide

19. Create a busybox pod and run command ls while creating it and check the logs

k run busybox --image busybox -- ls
k logs busybox

20. If pod crashed check the previous logs of the pod

k logs busybox

21. Create a busybox pod with command sleep 3600

k run busybox --image busybox -- sleep 3600

22. Check the connection of the nginx pod from the busybox pod



23. Create a busybox pod and echo message ‘How are you’ and delete it manually

k run bb --image busybox -- echo 'How are you'

24. Create a busybox pod and echo message ‘How are you’ and have it deleted immediately

k run bb1 --image busybox --rm -it  -- echo 'How are you'

25. Create an nginx pod and list the pod with different levels of verbosity

k get pods
k get pods -o wide

26. List the nginx pod with custom columns POD_NAME and POD_STATUS

27. List all the pods sorted by name

k get pods --sort-by=.metadata.name

28. List all the pods sorted by created timestamp

k get pods --sort-by=.metadata.creationTimestamp













===================================================================
Multi-Container Pods
====================================================================

Practice questions based on these concepts

    Understand multi-container pod design patterns (eg: ambassador, adaptor, sidecar)

29. Create a Pod with three busy box containers with commands “ls; sleep 3600;”, “echo Hello World; sleep 3600;” and “echo this is the third container; sleep 3600” respectively and check the status


30. Check the logs of each container that you just created

31. Check the previous logs of the second container busybox2 if any


32. Run command ls in the third container busybox3 of the above pod


33. Show metrics of the above pod containers and puts them into the file.log and verify


34. Create a Pod with main container busybox and which executes this “while true; do echo ‘Hi I am from Main container’ >> /var/log/index.html; sleep 5; done” and with sidecar container with nginx image which exposes on port 80. Use emptyDir Volume and mount this volume on path /var/log for busybox and on path /usr/share/nginx/html for nginx container. Verify both containers are running.

35. Exec into both containers and verify that main.txt exist and query the main.txt from sidecar container with curl localhost

===========================================================
		Pod Design
============================================================

Practice questions based on these concepts

    Understand how to use Labels, Selectors and Annotations
    Understand Deployments and how to perform rolling updates
    Understand Deployments and how to perform rollbacks
    Understand Jobs and CronJobs

36. Get the pods with label information

k get pods --show-labels

37. Create 5 nginx pods in which two of them is labeled env=prod and three of them is labeled env=dev

kubectl run nginx1 --image nginx
kubectl label pod nginx1 env=prod

38. Verify all the pods are created with correct labels

kubectl get pods --show-labels

39. Get the pods with label env=dev

k get pods --selector env=dev

40. Get the pods with label env=dev and also output the labels

k get pods --show-labels --selector env=dev

41. Get the pods with label env=prod

k get pods --show-labels --selector env=dev

42. Get the pods with label env=prod and also output the labels

k get pods --selector env=prod --show-labels

43. Get the pods with label env

k get pods --selector env

44. Get the pods with labels env=dev and env=prod

k get pods -l 'env in (prod,dev)'

45. Get the pods with labels env=dev and env=prod and output the labels as well

kubectl get pods -l 'env in(prod,dev)' --show-labels

46. Change the label for one of the pod to env=uat and list all the pods to verify

kubectl label pod nginx1 env=uat --overwrite=true

47. Remove the labels for the pods that we created now and verify all the labels are removed

kubectl label pod nginx1 env-

48. Let’s add the label app=nginx for all the pods and verify

kubectl label pod nginx1 app=nginx

49. Get all the nodes with labels (if using minikube you would get only master node)

kubectl get node --show-labels

50. Label the node (minikube if you are using) nodeName=nginxnode

kubectl label node docker-desktop nodeName=nginxnode

51. Create a Pod that will be deployed on this node with the label nodeName=nginxnode

kubectl run nginx7 --image nginx --dry-run -o yaml > test.yaml

52. Verify the pod that it is scheduled with the node selector

k get pods -o wide

53. Verify the pod nginx that we just created has this label

k get pods --show-labels

54. Annotate the pods with name=webapp

k annotate pod nginx1 name=webapp

55. Verify the pods that have been annotated correctly

k describe pod nginx1

56. Remove the annotations on the pods and verify

k annotate pods nginx1 name-

57. Remove all the pods that we created so far

k delete pods nginx7

58. Create a deployment called webapp with image nginx with 5 replicas

k create deployment webapp --image nginx --replicas 5

59. Get the deployment you just created with labels

k get deployment --show-labels

60. Output the yaml file of the deployment you just created


61. Get the pods of this deployment

kubectl get pods --selector app=webapp

62. Scale the deployment from 5 replicas to 20 replicas and verify

kubectl scale deployment webapp --replicas 20

63. Get the deployment rollout status

kubectl rollout status deployment/webapp

64. Get the replicaset that created with this deployment

kubectl get rs

65. Get the yaml of the replicaset and pods of this deployment


66. Delete the deployment you just created and watch all the pods are also being deleted

kubectl delete deployment webapp

67. Create a deployment of webapp with image nginx:1.17.1 with container port 80 and verify the image version

kubectl create deployment webapp --image nginx:1.17.1 --port 80

68. Update the deployment with the image version 1.17.4 and verify

kubectl edit deployment webapp

69. Check the rollout history and make sure everything is ok after the update

kubectl rollout history deployment/webapp

70. Undo the deployment to the previous version 1.17.1 and verify Image has the previous version

kubectl rollout undo deployment/webapp
kubectl get deployment webapp -o wide

71. Update the deployment with the image version 1.16.1 and verify the image and also check the rollout history

kubectl edit deployment webapp

72. Update the deployment to the Image 1.17.1 and verify everything is ok

kubectl rollout undo deployment/webapp

73. Update the deployment with the wrong image version 1.100 and verify something is wrong with the deployment

kubectl edit deployment webapp

74. Undo the deployment with the previous version and verify everything is Ok

k rollout undo deployment/webapp

75. Check the history of the specific revision of that deployment

k rollout history deployment/webapp

76. Pause the rollout of the deployment

k rollout pause deployment/webapp

77. Update the deployment with the image version latest and check the history and verify nothing is going on


78. Resume the rollout of the deployment

kubectl rollout resume deployment/webapp

79. Check the rollout history and verify it has the new version

kubectl rollout history deployment/webapp


80. Apply the autoscaling to this deployment with minimum 10 and maximum 20 replicas and target CPU of 85% and verify hpa is created and replicas are increased to 10 from 1


81. Clean the cluster by deleting deployment and hpa you just created


82. Create a Job with an image node which prints node version and also verifies there is a pod created for this job

83. Get the logs of the job just created


84. Output the yaml file for the Job with the image busybox which echos “Hello I am from job”


85. Copy the above YAML file to hello-job.yaml file and create the job


86. Verify the job and the associated pod is created and check the logs as well

87. Delete the job we just created


88. Create the same job and make it run 10 times one after one


89. Watch the job that runs 10 times one by one and verify 10 pods are created and delete those after it’s completed


90. Create the same job and make it run 10 times parallel


91. Watch the job that runs 10 times parallelly and verify 10 pods are created and delete those after it’s completed

92. Create a Cronjob with busybox image that prints date and hello from kubernetes cluster message for every minute


93. Output the YAML file of the above cronjob


94. Verify that CronJob creating a separate job and pods for every minute to run and verify the logs of the pod


95. Delete the CronJob and verify all the associated jobs and pods are also deleted.


============================================
                       State Persistence
==========================================================

96. List Persistent Volumes in the cluster

kubectl get persistentvolume

97. Create a hostPath PersistentVolume named task-pv-volume with storage 10Gi, access modes ReadWriteOnce, storageClassName manual, and volume at /mnt/data and verify

k create -f pv.yaml

98. Create a PersistentVolumeClaim of at least 3Gi storage and access mode ReadWriteOnce and verify status is Bound

k create -f pvc.yaml
	  
 99. Delete persistent volume and PersistentVolumeClaim we just created

k delete pv task-pv-volume
k delete pvc mypvc

100. Create a Pod with an image Redis and configure a volume that lasts for the lifetime of the Pod

// emptyDir is the volume that lasts for the life of the pod
kubectl create -f redis-storage.yaml

	
101. Exec into the above pod and create a file named file.txt with the text ‘This is called the file’ in the path /data/redis and open another tab and exec again with the same pod and verifies file exist in the same path.

kubectl exec redis123 -it -- sh

102. Delete the above pod and create again from the same yaml file and verifies there is no file.txt in the path /data/redis

k exec redis123 -it -- sh

103. Create PersistentVolume named task-pv-volume with storage 10Gi, access modes ReadWriteOnce, storageClassName manual, and volume at /mnt/data and Create a PersistentVolumeClaim of at least 3Gi storage and access mode ReadWriteOnce and verify status is Bound

k create -f nginxpod.yaml

104. Create an nginx pod with containerPort 80 and with a PersistentVolumeClaim task-pv-claim and has a mouth path "/usr/share/nginx/html"

k create -f nginxpod.yaml

==============================================================
                              Configuration
============================================================

    Understand ConfigMaps
    Understand SecurityContexts
    Define an application’s resource requirements
    Create & Consume Secrets
    Understand ServiceAccounts
	
105. List all the configmaps in the cluster


106. Create a configmap called myconfigmap with literal value appname=myapp


107. Verify the configmap we just created has this data


108. delete the configmap myconfigmap we just created


109. Create a file called config.txt with two values key1=value1 and key2=value2 and verify the file

110. Create a configmap named keyvalcfgmap and read data from the file config.txt and verify that configmap is created correctly


111. Create an nginx pod and load environment values from the above configmap keyvalcfgmap and exec into the pod and verify the environment variables and delete the pod

112. Create an env file file.env with var1=val1 and create a configmap envcfgmap from this env file and verify the configmap


113. Create an nginx pod and load environment values from the above configmap envcfgmap and exec into the pod and verify the environment variables and delete the pod

114. Create a configmap called cfgvolume with values var1=val1, var2=val2 and create an nginx pod with volume nginx-volume which reads data from this configmap cfgvolume and put it on the path /etc/cfg


115. Create a pod called secbusybox with the image busybox which executes command sleep 3600 and makes sure any Containers in the Pod, all processes run with user ID 1000 and with group id 2000 and verify.


116. Create the same pod as above this time set the securityContext for the container as well and verify that the securityContext of container overrides the Pod level securityContext.


117. Create pod with an nginx image and configure the pod with capabilities NET_ADMIN and SYS_TIME verify the capabilities


118. Create a Pod nginx and specify a memory request and a memory limit of 100Mi and 200Mi respectively.


119. Create a Pod nginx and specify a CPU request and a CPU limit of 0.5 and 1 respectively.


120. Create a Pod nginx and specify both CPU, memory requests and limits together and verify.

121. Create a Pod nginx and specify a memory request and a memory limit of 100Gi and 200Gi respectively which is too big for the nodes and verify pod fails to start because of insufficient memory

122. Create a secret mysecret with values user=myuser and password=mypassword


123. List the secrets in all namespaces


124. Output the yaml of the secret created above


125. Create an nginx pod which reads username as the environment variable

126. Create an nginx pod which loads the secret as environment variables


127. List all the service accounts in the default namespace


128. List all the service accounts in all namespaces


129. Create a service account called admin


130. Output the YAML file for the service account we just created


131. Create a busybox pod which executes this command sleep 3600 with the service account admin and verify



===================================================================
Observability
==================================================================

    Understand LivenessProbes and ReadinessProbes
    Understand Container Logging
    Understand how to monitor applications in kubernetes
    Understand Debugging in Kubernetes

132. Create an nginx pod with containerPort 80 and it should only receive traffic only it checks the endpoint / on port 80 and verify and delete the pod.

133. Create an nginx pod with containerPort 80 and it should check the pod running at endpoint / healthz on port 80 and verify and delete the pod.


134. Create an nginx pod with containerPort 80 and it should check the pod running at endpoint /healthz on port 80 and it should only receive traffic only it checks the endpoint / on port 80. verify the pod.

135. Check what all are the options that we can configure with readiness and liveness probes


136. Create the pod nginx with the above liveness and readiness probes so that it should wait for 20 seconds before it checks liveness and readiness probes and it should check every 25 seconds.


137. Create a busybox pod with this command “echo I am from busybox pod; sleep 3600;” and verify the logs.


138. copy the logs of the above pod to the busybox-logs.txt and verify


139. List all the events sorted by timestamp and put them into file.log and verify


140. Create a pod with an image alpine which executes this command ”while true; do echo ‘Hi I am from alpine’; sleep 5; done” and verify and follow the logs of the pod.


141. Create the pod with this kubectl create -f https://gist.githubusercontent.com/bbachi/212168375b39e36e2e2984c097167b00/raw/1fd63509c3ae3a3d3da844640fb4cca744543c1c/not-running.yml. The pod is not in the running state. Debug it.


142. This following yaml creates 4 namespaces and 4 pods. One of the pod in one of the namespaces are not in the running state. Debug and fix it. https://gist.githubusercontent.com/bbachi/1f001f10337234d46806929d12245397/raw/84b7295fb077f15de979fec5b3f7a13fc69c6d83/problem-pod.yaml.


143. Get the memory and CPU usage of all the pods and find out top 3 pods which have the highest usage and put them into the cpu-usage.txt file


==========================================
Services and Networking
==============================================================
    Understand Services
    Demonstrate a basic understanding of NetworkPolicies

144. Create an nginx pod with a yaml file with label my-nginx and expose the port 80


145. Create the service for this nginx pod with the pod selector app: my-nginx

	  
146. Find out the label of the pod and verify the service has the same label


147. Delete the service and create the service with kubectl expose command and verify the label


148. Delete the service and create the service again with type NodePort


149. Create the temporary busybox pod and hit the service. Verify the service that it should return the nginx page index.html.


150. Create a NetworkPolicy which denies all ingress traffic


================Daemonset yaml==============
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-elasticsearch
  labels:
    k8s-app: fluentd-logging
spec:
  selector:
    matchLabels:
      name: fluentd-elasticsearch
  template:
    metadata:
      labels:
        name: fluentd-elasticsearch
    spec:
      tolerations:
      # this toleration is to have the daemonset runnable on master nodes
      # remove it if your masters can't run pods
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: fluentd-elasticsearch
        image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2
